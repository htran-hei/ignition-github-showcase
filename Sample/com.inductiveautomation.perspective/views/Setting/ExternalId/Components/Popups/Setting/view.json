{
  "custom": {},
  "events": {
    "system": {
      "onShutdown": {
        "config": {
          "script": "\tpayload \u003d {\n\t\t\u0027state\u0027: self.params.state,\n\t\t\u0027openPopup\u0027: self.params.openPopup\n\t}\n\tsystem.perspective.sendMessage(\u0027popupMessage\u0027, payload)\n\tsystem.perspective.closePopup(\u0027SettingExternalId\u0027)"
        },
        "scope": "G",
        "type": "script"
      },
      "onStartup": {
        "config": {
          "script": "\tlogger \u003d system.util.getLogger(\u0027IgnitionSystem\u0027)\n\tdatapoint \u003d \u0027\u0027\n\tif self.params.state[\u0027type\u0027]:\n\t\tif self.params.state[\u0027type\u0027] \u003d\u003d \u0027Completion\u0027:\n\t\t\tdatapoint \u003d \u0027WellHead\u0027\n\t\telif \u0027Gas\u0027 in self.params.state[\u0027type\u0027]:\n\t\t\tdatapoint \u003d \u0027Gas Meter - \u0027 + self.params.state[\u0027type\u0027].split(\u0027 \u0027)[0]\n\t\telse:\n\t\t\tdatapoint \u003d self.params.state[\u0027type\u0027]\n\ttry:\n\t\tself.getChild(\"root\").getChild(\"InputContainer\").getChild(\"PadContainer\").getChild(\"Dropdown\").props.value \u003d self.params.state[\u0027pad\u0027]\n\t\tself.getChild(\"root\").getChild(\"InputContainer\").getChild(\"WellContainer\").getChild(\"Dropdown\").props.value \u003d self.params.state[\u0027well\u0027]\n\t\tself.getChild(\"root\").getChild(\"InputContainer\").getChild(\"TypeContainer\").getChild(\"Dropdown\").props.value \u003d datapoint\n\t\tself.getChild(\"root\").getChild(\"InputContainer\").getChild(\"IdContainer\").getChild(\"TextField\").props.text \u003d self.params.state[\u0027external_ref_id\u0027]\n\t\tself.getChild(\"root\").getChild(\"InputContainer\").getChild(\"TypeContainer\").getChild(\"Dropdown\").props.enabled \u003d False if self.params.state[\u0027action\u0027] \u003d\u003d \u0027Update\u0027 and \u0027Gas\u0027 in datapoint else True\n\texcept Exception as e:\n\t\tlogger.info(\u0027Setting External Id Popup - Initiating \u003e\u003e \u0027+e.message)"
        },
        "scope": "G",
        "type": "script"
      }
    }
  },
  "params": {
    "openPopup": false,
    "state": {
      "action": "Add",
      "asset": null,
      "external_ref_id": "",
      "id": "",
      "pad": null,
      "phase": "Editing",
      "type": null,
      "well": null
    },
    "viewPort": {
      "mobileView": false,
      "pcView": false
    }
  },
  "propConfig": {
    "params.openPopup": {
      "paramDirection": "inout",
      "persistent": true
    },
    "params.state": {
      "paramDirection": "inout",
      "persistent": true
    },
    "params.viewPort": {
      "paramDirection": "input",
      "persistent": true
    }
  },
  "props": {
    "defaultSize": {
      "height": 599,
      "width": 698
    }
  },
  "root": {
    "children": [
      {
        "children": [
          {
            "meta": {
              "name": "Label"
            },
            "position": {
              "basis": "50px"
            },
            "props": {
              "style": {
                "fontSize": "20px"
              },
              "text": "Setting External Reference Id",
              "textStyle": {
                "fontWeight": "bolder",
                "textAlign": "center"
              }
            },
            "type": "ia.display.label"
          }
        ],
        "meta": {
          "name": "Title"
        },
        "position": {
          "basis": "36px",
          "shrink": 0
        },
        "props": {
          "direction": "column",
          "style": {
            "backgroundColor": "#0066FF"
          }
        },
        "type": "ia.container.flex"
      },
      {
        "children": [
          {
            "meta": {
              "name": "Label"
            },
            "position": {
              "basis": "50px",
              "grow": 1
            },
            "propConfig": {
              "props.style.classes": {
                "binding": {
                  "config": {
                    "path": ".../ButtonContainer.custom.status"
                  },
                  "transforms": [
                    {
                      "fallback": "",
                      "inputType": "scalar",
                      "mappings": [
                        {
                          "input": "Add Successful",
                          "output": "NotificationColors/Approved"
                        },
                        {
                          "input": "Add Failed",
                          "output": "NotificationColors/Danger"
                        },
                        {
                          "input": "Gas Meter Not Found",
                          "output": "NotificationColors/Warning"
                        },
                        {
                          "input": "Id Has Been Used",
                          "output": "NotificationColors/Warning"
                        },
                        {
                          "input": "Update Successful",
                          "output": "NotificationColors/Approved"
                        },
                        {
                          "input": "Update Failed",
                          "output": "NotificationColors/Danger"
                        }
                      ],
                      "outputType": "style-list",
                      "type": "map"
                    }
                  ],
                  "type": "property"
                }
              },
              "props.text": {
                "binding": {
                  "config": {
                    "path": ".../ButtonContainer.custom.status"
                  },
                  "type": "property"
                }
              }
            },
            "props": {
              "style": {},
              "textStyle": {
                "fontSize": 16,
                "fontWeight": "bold",
                "textAlign": "center"
              }
            },
            "type": "ia.display.label"
          }
        ],
        "meta": {
          "name": "AlertContainer"
        },
        "position": {
          "basis": "36px",
          "shrink": 0
        },
        "type": "ia.container.flex"
      },
      {
        "children": [
          {
            "children": [
              {
                "meta": {
                  "name": "Label"
                },
                "position": {
                  "basis": "30%"
                },
                "propConfig": {
                  "position.display": {
                    "binding": {
                      "config": {
                        "expression": "!{view.params.viewPort.mobileView}"
                      },
                      "type": "expr"
                    }
                  },
                  "props.style.fontSize": {
                    "binding": {
                      "config": {
                        "expression": "if({view.params.viewPort.mobileView}, \u002714px\u0027, if({view.params.viewPort.pcView}, \u002718px\u0027, \u002716px\u0027))"
                      },
                      "type": "expr"
                    }
                  }
                },
                "props": {
                  "style": {
                    "fontWeight": "bold",
                    "paddingRight": "18px"
                  },
                  "text": "Asset"
                },
                "type": "ia.display.label"
              },
              {
                "events": {
                  "dom": {
                    "onFocus": {
                      "config": {
                        "script": "\tself.view.params.state.phase \u003d \u0027Editing\u0027"
                      },
                      "scope": "G",
                      "type": "script"
                    }
                  }
                },
                "meta": {
                  "name": "Dropdown"
                },
                "position": {
                  "basis": "70%"
                },
                "propConfig": {
                  "props.enabled": {
                    "binding": {
                      "config": {
                        "expression": "!({view.params.state.action} \u003d \u0027Update\u0027)"
                      },
                      "type": "expr"
                    }
                  },
                  "props.options": {
                    "binding": {
                      "config": {
                        "polling": {
                          "enabled": true,
                          "rate": "30"
                        },
                        "queryPath": "AssetDropdown"
                      },
                      "type": "query"
                    }
                  },
                  "props.placeholder.text": {
                    "binding": {
                      "config": {
                        "expression": "if({view.params.viewPort.mobileView}, \u0027Asset*...\u0027, \u0027Asset...\u0027)"
                      },
                      "enabled": false,
                      "type": "expr"
                    }
                  },
                  "props.style.backgroundColor": {
                    "binding": {
                      "config": {
                        "expression": "if(!{this.props.enabled}, \u0027#AAAAAA\u0027, \u0027#FFFFFF\u0027)"
                      },
                      "type": "expr"
                    }
                  },
                  "props.value": {
                    "onChange": {
                      "enabled": null,
                      "script": "\tself.view.params.state.asset \u003d currentValue.value"
                    }
                  }
                },
                "props": {
                  "placeholder": {
                    "text": "Asset..."
                  },
                  "search": {
                    "enabled": false
                  },
                  "showClearIcon": true,
                  "style": {
                    "classes": "WellDetail/RoundedBorder",
                    "color": "#000000",
                    "fontSize": 16,
                    "fontWeight": "bold"
                  },
                  "value": null
                },
                "type": "ia.input.dropdown"
              }
            ],
            "meta": {
              "name": "LocContainer"
            },
            "propConfig": {
              "position.basis": {
                "binding": {
                  "config": {
                    "expression": "if({view.params.viewPort.mobileView}, \u002750%\u0027, if({view.params.viewPort.pcView},\u002742px\u0027, \u002740%\u0027)) "
                  },
                  "type": "expr"
                }
              },
              "props.style.paddingLeft": {
                "binding": {
                  "config": {
                    "expression": "if({view.params.viewPort.mobileView}, \u00270px\u0027, \u002716px\u0027) "
                  },
                  "type": "expr"
                }
              },
              "props.style.paddingRight": {
                "binding": {
                  "config": {
                    "expression": "if({view.params.viewPort.mobileView}, \u00270px\u0027, \u002716px\u0027) "
                  },
                  "type": "expr"
                }
              }
            },
            "props": {
              "justify": "space-around"
            },
            "type": "ia.container.flex"
          },
          {
            "children": [
              {
                "meta": {
                  "name": "Label"
                },
                "position": {
                  "basis": "30%"
                },
                "propConfig": {
                  "position.display": {
                    "binding": {
                      "config": {
                        "expression": "!{view.params.viewPort.mobileView}"
                      },
                      "type": "expr"
                    }
                  },
                  "props.style.fontSize": {
                    "binding": {
                      "config": {
                        "expression": "if({view.params.viewPort.mobileView}, \u002714px\u0027, if({view.params.viewPort.pcView}, \u002718px\u0027, \u002716px\u0027))"
                      },
                      "type": "expr"
                    }
                  }
                },
                "props": {
                  "style": {
                    "fontWeight": "bold",
                    "paddingRight": "18px"
                  },
                  "text": "Pad*"
                },
                "type": "ia.display.label"
              },
              {
                "events": {
                  "dom": {
                    "onFocus": {
                      "config": {
                        "script": "\tself.view.params.state.phase \u003d \u0027Editing\u0027"
                      },
                      "scope": "G",
                      "type": "script"
                    }
                  }
                },
                "meta": {
                  "name": "Dropdown"
                },
                "position": {
                  "basis": "70%"
                },
                "propConfig": {
                  "props.enabled": {
                    "binding": {
                      "config": {
                        "expression": "!({view.params.state.action} \u003d \u0027Update\u0027)"
                      },
                      "type": "expr"
                    }
                  },
                  "props.options": {
                    "binding": {
                      "config": {
                        "parameters": {
                          "asset": "if({.../LocContainer/Dropdown.props.value} \u003d null, -1, {.../LocContainer/Dropdown.props.value})"
                        },
                        "queryPath": "PadQuery"
                      },
                      "type": "query"
                    }
                  },
                  "props.placeholder.text": {
                    "binding": {
                      "config": {
                        "expression": "if({view.params.viewPort.mobileView}, \u0027Pad*...\u0027, \u0027Pad...\u0027)"
                      },
                      "type": "expr"
                    }
                  },
                  "props.style.backgroundColor": {
                    "binding": {
                      "config": {
                        "expression": "if(!{this.props.enabled}, \u0027#AAAAAA\u0027, \u0027#FFFFFF\u0027)"
                      },
                      "type": "expr"
                    }
                  },
                  "props.value": {
                    "onChange": {
                      "enabled": null,
                      "script": "\tself.view.params.state.pad \u003d currentValue.value\n\tif currentValue !\u003d None:\n\t\tself.parent.props.style.backgroundColor \u003d \u0027\u0027"
                    }
                  }
                },
                "props": {
                  "placeholder": {},
                  "showClearIcon": true,
                  "style": {
                    "classes": "WellDetail/RoundedBorder",
                    "color": "#000000",
                    "fontSize": 16,
                    "fontWeight": "bold"
                  },
                  "value": null
                },
                "type": "ia.input.dropdown"
              }
            ],
            "meta": {
              "name": "PadContainer"
            },
            "propConfig": {
              "position.basis": {
                "binding": {
                  "config": {
                    "expression": "if({view.params.viewPort.mobileView}, \u002750%\u0027, if({view.params.viewPort.pcView},\u002742px\u0027, \u002740%\u0027)) "
                  },
                  "type": "expr"
                }
              },
              "props.style.paddingLeft": {
                "binding": {
                  "config": {
                    "expression": "if({view.params.viewPort.mobileView}, \u00270px\u0027, \u002716px\u0027) "
                  },
                  "type": "expr"
                }
              },
              "props.style.paddingRight": {
                "binding": {
                  "config": {
                    "expression": "if({view.params.viewPort.mobileView}, \u00270px\u0027, \u002716px\u0027) "
                  },
                  "type": "expr"
                }
              }
            },
            "props": {
              "justify": "space-around",
              "style": {
                "backgroundColor": ""
              }
            },
            "type": "ia.container.flex"
          },
          {
            "children": [
              {
                "meta": {
                  "name": "Label"
                },
                "position": {
                  "basis": "30%"
                },
                "propConfig": {
                  "position.display": {
                    "binding": {
                      "config": {
                        "expression": "!{view.params.viewPort.mobileView}"
                      },
                      "type": "expr"
                    }
                  },
                  "props.style.fontSize": {
                    "binding": {
                      "config": {
                        "expression": "if({view.params.viewPort.mobileView}, \u002714px\u0027, if({view.params.viewPort.pcView}, \u002718px\u0027, \u002716px\u0027))"
                      },
                      "type": "expr"
                    }
                  }
                },
                "props": {
                  "style": {
                    "fontWeight": "bold",
                    "paddingRight": "18px"
                  },
                  "text": "Well*"
                },
                "type": "ia.display.label"
              },
              {
                "events": {
                  "dom": {
                    "onFocus": {
                      "config": {
                        "script": "\tself.view.params.state.phase \u003d \u0027Editing\u0027"
                      },
                      "scope": "G",
                      "type": "script"
                    }
                  }
                },
                "meta": {
                  "name": "Dropdown"
                },
                "position": {
                  "basis": "70%"
                },
                "propConfig": {
                  "props.enabled": {
                    "binding": {
                      "config": {
                        "expression": "!({view.params.state.action} \u003d \u0027Update\u0027)"
                      },
                      "type": "expr"
                    }
                  },
                  "props.options": {
                    "binding": {
                      "config": {
                        "parameters": {
                          "pad": "if({.../PadContainer/Dropdown.props.value} \u003d null, -1,{.../PadContainer/Dropdown.props.value}) "
                        },
                        "queryPath": "WellQuery"
                      },
                      "transforms": [
                        {
                          "code": "\treturn system.dataset.addRow(value, 0, [0, \u0027PadData\u0027])",
                          "type": "script"
                        }
                      ],
                      "type": "query"
                    }
                  },
                  "props.placeholder.text": {
                    "binding": {
                      "config": {
                        "expression": "if({view.params.viewPort.mobileView}, \u0027Well*...\u0027, \u0027Well...\u0027)"
                      },
                      "type": "expr"
                    }
                  },
                  "props.style.backgroundColor": {
                    "binding": {
                      "config": {
                        "expression": "if(!{this.props.enabled}, \u0027#AAAAAA\u0027, \u0027#FFFFFF\u0027)"
                      },
                      "type": "expr"
                    }
                  },
                  "props.value": {
                    "onChange": {
                      "enabled": null,
                      "script": "\tself.view.params.state.well \u003d currentValue.value\n\tif currentValue !\u003d None:\n\t\tself.parent.props.style.backgroundColor \u003d \u0027\u0027"
                    }
                  }
                },
                "props": {
                  "placeholder": {},
                  "showClearIcon": true,
                  "style": {
                    "classes": "WellDetail/RoundedBorder",
                    "color": "#000000",
                    "fontSize": 16,
                    "fontWeight": "bold"
                  },
                  "value": null
                },
                "type": "ia.input.dropdown"
              }
            ],
            "events": {
              "component": {
                "onActionPerformed": {
                  "config": {
                    "script": "\t\u0027\u0027\u0027 Add external reference id\n\tReturns None\n\t\u0027\u0027\u0027\n\tlogger \u003d system.util.getLogger(\u0027IgnitionSystem\u0027)\n#\tInput Control preventing SQL injection attack\n\tpad \u003d self.parent.parent.getChild(\"InputContainer\").custom.input.pad\n\twell \u003d self.parent.parent.getChild(\"InputContainer\").custom.input.well\n\tdatapoint \u003d self.parent.parent.getChild(\"InputContainer\").custom.input.type\n\texternalId \u003d self.parent.parent.getChild(\"InputContainer\").custom.input.id\n\tlogger.info(str(type(datapoint)))\n\tif not isinstance(pad, long):\n\t\tlogger.fatal(\u0027External Reference Id Setting - Add \u003e\u003e Invalid Input 1\u0027)\n\t\treturn\n\tif not isinstance(well, long):\n\t\tlogger.fatal(\u0027External Reference Id Setting - Add \u003e\u003e Invalid Input 2\u0027)\n\t\treturn\n\tif not isinstance(datapoint, unicode):\n\t\tlogger.fatal(\u0027External Reference Id Setting - Add \u003e\u003e Invalid Input 3\u0027)\n\t\treturn\n\tif \u0027select\u0027 in externalId.lower() or \u0027insert\u0027 in externalId.lower() or \u0027delete\u0027 in externalId.lower() or \u0027update\u0027 in externalId.lower() or externalId.lower() \u003d\u003d \u0027null\u0027:\n\t\tlogger.fatal(\u0027External Reference Id Setting - Add \u003e\u003e Invalid Input 4\u0027)\n\t\treturn\n\t\t\n\tinsertQuery \u003d \u0027\u0027\n\tif \u0027Gas\u0027 not in datapoint:\n\t\tinsertQuery \u003d \u0027\u0027\u0027\n\t\tINSERT INTO external_reference (pad_id, wellsite_id, datapoint, external_ref_id)\n\t\tSELECT \n\t\t\t{pad}, \n\t\t\t{well}, \n\t\t\t\\\u0027{datapoint}\\\u0027,\n\t\t\t\\\u0027{externalId}\\\u0027\n\t\tWHERE NOT EXISTS (\n\t\t\tSELECT 1 \n\t\t\tFROM external_reference \n\t\t\tWHERE\n\t\t\t\tpad_id \u003d {pad}\n\t\t\tAND wellsite_id \u003d {well}\n\t\t\tAND datapoint \u003d \\\u0027{datapoint}\\\u0027\n\t\t\tAND external_ref_id \u003d \\\u0027{externalId}\\\u0027\n\t\t)\n\t\t\u0027\u0027\u0027.format(\n\t\t\tpad \u003d pad,\n\t\t\twell \u003d well,\n\t\t\tdatapoint \u003d \u0027WellHead\u0027 if datapoint \u003d\u003d \u0027Completion\u0027 else datapoint,\n\t\t\texternalId \u003d externalId\n\t\t)\n\t\ttry:\n\t\t\tres \u003d system.db.runUpdateQuery(insertQuery)\n\t\t\tif res \u003e 0:\n\t\t\t\tself.parent.custom.status \u003d \u0027Add Successful\u0027\n\t\t\telse:\n\t\t\t\tself.parent.custom.status \u003d \u0027Add Failed\u0027\n\t\texcept Exception as e:\n\t\t\tlogger.info(\u0027External Reference Id Setting - Add \u003e\u003e \u0027+ e.message)\n\t\tfinally:\n\t\t\tself.props.value \u003d 0"
                  },
                  "scope": "G",
                  "type": "script"
                }
              }
            },
            "meta": {
              "name": "WellContainer"
            },
            "propConfig": {
              "position.basis": {
                "binding": {
                  "config": {
                    "expression": "if({view.params.viewPort.mobileView}, \u002750%\u0027, if({view.params.viewPort.pcView},\u002742px\u0027, \u002740%\u0027)) "
                  },
                  "type": "expr"
                }
              },
              "props.style.paddingLeft": {
                "binding": {
                  "config": {
                    "expression": "if({view.params.viewPort.mobileView}, \u00270px\u0027, \u002716px\u0027) "
                  },
                  "type": "expr"
                }
              },
              "props.style.paddingRight": {
                "binding": {
                  "config": {
                    "expression": "if({view.params.viewPort.mobileView}, \u00270px\u0027, \u002716px\u0027) "
                  },
                  "type": "expr"
                }
              }
            },
            "props": {
              "justify": "space-around",
              "style": {
                "backgroundColor": ""
              }
            },
            "type": "ia.container.flex"
          },
          {
            "children": [
              {
                "meta": {
                  "name": "Label"
                },
                "position": {
                  "basis": "30%"
                },
                "propConfig": {
                  "position.display": {
                    "binding": {
                      "config": {
                        "expression": "!{view.params.viewPort.mobileView}"
                      },
                      "type": "expr"
                    }
                  },
                  "props.style.fontSize": {
                    "binding": {
                      "config": {
                        "expression": "if({view.params.viewPort.mobileView}, \u002714px\u0027, if({view.params.viewPort.pcView}, \u002718px\u0027, \u002716px\u0027))"
                      },
                      "type": "expr"
                    }
                  }
                },
                "props": {
                  "style": {
                    "fontWeight": "bold",
                    "paddingRight": "18px"
                  },
                  "text": "Type*"
                },
                "type": "ia.display.label"
              },
              {
                "events": {
                  "dom": {
                    "onFocus": {
                      "config": {
                        "script": "\tself.view.params.state.phase \u003d \u0027Editing\u0027"
                      },
                      "scope": "G",
                      "type": "script"
                    }
                  }
                },
                "meta": {
                  "name": "Dropdown"
                },
                "position": {
                  "basis": "70%"
                },
                "propConfig": {
                  "custom.rawOptions": {
                    "binding": {
                      "config": {
                        "parameters": {
                          "pad": "-1",
                          "well": "-1"
                        },
                        "queryPath": "DatapointQuery"
                      },
                      "transforms": [
                        {
                          "code": "\tif self.view.params.state.action \u003d\u003d \u0027Add\u0027 or \u0027Gas\u0027 in self.view.params.state.type:\n\t\treturn value\n\t\n\theaders \u003d [\u0027value\u0027, \u0027label\u0027]\n\tdata \u003d []\n\tfor row in range(value.getRowCount()):\n\t\tif \u0027Gas\u0027 in value.getValueAt(row, \u0027value\u0027):\n\t\t\tcontinue\n\t\tdata.append([value.getValueAt(row,0), value.getValueAt(row,1)])\n\treturn system.dataset.toDataSet(headers, data)",
                          "type": "script"
                        }
                      ],
                      "type": "query"
                    }
                  },
                  "props.enabled": {
                    "binding": {
                      "config": {
                        "expression": "!({view.params.state.action} \u003d \u0027Update\u0027)"
                      },
                      "type": "expr"
                    }
                  },
                  "props.options": {
                    "binding": {
                      "config": {
                        "path": "this.custom.rawOptions"
                      },
                      "type": "property"
                    }
                  },
                  "props.placeholder.text": {
                    "binding": {
                      "config": {
                        "expression": "if({view.params.viewPort.mobileView}, \u0027Type*...\u0027, \u0027Type...\u0027)"
                      },
                      "type": "expr"
                    }
                  },
                  "props.style.backgroundColor": {
                    "binding": {
                      "config": {
                        "expression": "if(!{this.props.enabled}, \u0027#AAAAAA\u0027, \u0027#FFFFFF\u0027)"
                      },
                      "type": "expr"
                    }
                  },
                  "props.value": {
                    "onChange": {
                      "enabled": null,
                      "script": "\tself.view.params.state.type \u003d currentValue.value\n\tif currentValue !\u003d None:\n\t\tself.parent.props.style.backgroundColor \u003d \u0027\u0027"
                    }
                  }
                },
                "props": {
                  "placeholder": {},
                  "showClearIcon": true,
                  "style": {
                    "classes": "WellDetail/RoundedBorder",
                    "color": "#000000",
                    "fontSize": 16,
                    "fontWeight": "bold"
                  },
                  "value": null
                },
                "type": "ia.input.dropdown"
              }
            ],
            "meta": {
              "name": "TypeContainer"
            },
            "propConfig": {
              "position.basis": {
                "binding": {
                  "config": {
                    "expression": "if({view.params.viewPort.mobileView}, \u002750%\u0027, if({view.params.viewPort.pcView},\u002742px\u0027, \u002740%\u0027)) "
                  },
                  "type": "expr"
                }
              },
              "props.style.paddingLeft": {
                "binding": {
                  "config": {
                    "expression": "if({view.params.viewPort.mobileView}, \u00270px\u0027, \u002716px\u0027) "
                  },
                  "type": "expr"
                }
              },
              "props.style.paddingRight": {
                "binding": {
                  "config": {
                    "expression": "if({view.params.viewPort.mobileView}, \u00270px\u0027, \u002716px\u0027) "
                  },
                  "type": "expr"
                }
              }
            },
            "props": {
              "justify": "space-around",
              "style": {
                "backgroundColor": ""
              }
            },
            "type": "ia.container.flex"
          },
          {
            "children": [
              {
                "meta": {
                  "name": "Label"
                },
                "position": {
                  "basis": "30%"
                },
                "propConfig": {
                  "position.display": {
                    "binding": {
                      "config": {
                        "expression": "!{view.params.viewPort.mobileView}"
                      },
                      "type": "expr"
                    }
                  },
                  "props.style.fontSize": {
                    "binding": {
                      "config": {
                        "expression": "if({view.params.viewPort.mobileView}, \u002712px\u0027, if({view.params.viewPort.pcView}, \u002716px\u0027, \u002714px\u0027))"
                      },
                      "type": "expr"
                    }
                  }
                },
                "props": {
                  "style": {
                    "fontWeight": "bold",
                    "paddingRight": "18px"
                  },
                  "text": "External Id*"
                },
                "type": "ia.display.label"
              },
              {
                "custom": {
                  "duplicated": {
                    "$": [
                      "ds",
                      192,
                      1739892700282
                    ],
                    "$columns": []
                  },
                  "query": "\n\t\tSELECT\n\t\t\txref.pad_id,\n\t\t\tpads.padname AS pad,\n\t\t\txref.wellsite_id,\n\t\t\tCASE\n\t\t\t\tWHEN xref.wellsite_id \u003d 0 THEN pads.padname + \u0027/PadData\u0027 ELSE ws.wellname\n\t\t\tEND AS well,\n\t\t\txref.datapoint,\n\t\t\txref.external_ref_id\n\t\tFROM external_reference xref\n\t\tLEFT JOIN pads ON pads.id \u003d pad_id\n\t\tLEFT JOIN wellsites ws ON ws.padId \u003d xref.pad_id AND (xref.wellsite_id \u003d ws.id OR (xref.wellsite_id \u003d 0 AND ws.id IS NULL) )\n\t\tWHERE external_ref_id \u003d \u0027test123\u0027\n\t\tORDER BY pad, well\n\t\t"
                },
                "events": {
                  "dom": {
                    "onFocus": {
                      "config": {
                        "script": "\tself.view.params.state.phase \u003d \u0027Editing\u0027"
                      },
                      "scope": "G",
                      "type": "script"
                    }
                  }
                },
                "meta": {
                  "name": "TextField"
                },
                "position": {
                  "basis": "70%"
                },
                "propConfig": {
                  "props.placeholder": {
                    "binding": {
                      "config": {
                        "expression": "if({view.params.viewPort.mobileView}, \u0027External Reference Id*...\u0027, \u0027External Reference Id...\u0027)"
                      },
                      "type": "expr"
                    }
                  },
                  "props.text": {
                    "onChange": {
                      "enabled": null,
                      "script": "\tlogger \u003d system.util.getLogger(\u0027IgnitionSystem\u0027)\n\t\n\tif self.view.params.state.phase \u003d\u003d \u0027Initial\u0027:\n\t\treturn\n\t\n\tself.view.params.state.external_ref_id \u003d currentValue.value\n\tif (currentValue.value is None or currentValue.value.strip(\u0027\\n\u0027) \u003d\u003d \u0027\u0027)\\\n\t\tand self.parent.parent.getChild(\"PadContainer\").getChild(\"Dropdown\").props.value is None\\\n\t\tand self.parent.parent.getChild(\"WellContainer\").getChild(\"Dropdown\").props.value is None\\\n\t\tand self.parent.parent.getChild(\"TypeContainer\").getChild(\"Dropdown\").props.value is None:\n\t\treturn\n\t\t\n\tif currentValue.value !\u003d None and currentValue.value.strip(\u0027\\n\u0027) !\u003d \u0027\u0027:\n\t\tself.parent.props.style.backgroundColor \u003d \u0027\u0027\n\t\t\n\tuserInput \u003d currentValue.value\n\tquery \u003d \u0027\u0027\n\tif self.parent.parent.getChild(\"TypeContainer\").getChild(\"Dropdown\").props.value is not None and \u0027Gas\u0027 in self.parent.parent.getChild(\"TypeContainer\").getChild(\"Dropdown\").props.value:\n\t\tquery \u003d \u0027\u0027\u0027\n\t\tSELECT \n\t\t\tgm.PadId as pad_id,\n\t\t\tpads.padname AS pad,\n\t\t\tgm.wellSiteId,\n\t\t\tCASE\n\t\t\t\tWHEN gm.wellSiteId \u003d 0 THEN pads.padname + \u0027/PadData\u0027 ELSE ws.wellname\n\t\t\tEND AS well,\n\t\t\tgt.type + \u0027 Gas - \u0027 + gm.name AS \u0027datapoint\u0027,\n\t\t\tgm.external_reference_id as external_ref_id\n\t\tFROM gasmeters gm\n\t\tLEFT JOIN pads ON pads.id \u003d gm.PadId\n\t\tLEFT JOIN wellsites ws ON ws.padId \u003d gm.PadId AND (gm.wellSiteId \u003d ws.id)\n\t\tLEFT JOIN gasmeter_types gt ON gt.id \u003d gm.gmTypeId\n\t\tWHERE external_reference_id \u003d \\\u0027{userInput}\\\u0027\n\t\tORDER BY pad, well\n\t\t\u0027\u0027\u0027.format(userInput \u003d userInput, id \u003d self.view.params.state.id)\n\telse:\n\t\tquery \u003d \u0027\u0027\u0027\n\t\tSELECT\n\t\t\txref.pad_id,\n\t\t\tpads.padname AS pad,\n\t\t\txref.wellsite_id,\n\t\t\tCASE\n\t\t\t\tWHEN xref.wellsite_id \u003d 0 THEN pads.padname + \u0027/PadData\u0027 ELSE ws.wellname\n\t\t\tEND AS well,\n\t\t\txref.datapoint,\n\t\t\txref.external_ref_id\n\t\tFROM external_reference xref\n\t\tLEFT JOIN pads ON pads.id \u003d pad_id\n\t\tLEFT JOIN wellsites ws ON ws.padId \u003d xref.pad_id AND (xref.wellsite_id \u003d ws.id OR (xref.wellsite_id \u003d 0 AND ws.id IS NULL) )\n\t\tWHERE external_ref_id \u003d \\\u0027{userInput}\\\u0027\n\t\tORDER BY pad, well\n\t\t\u0027\u0027\u0027.format(userInput \u003d userInput, id \u003d self.view.params.state.id)\n\n\ttry:\n\t\tres \u003d system.db.runQuery(query)\n\t\tif res.getRowCount() \u003e 0:\n\t\t\tself.parent.parent.parent.getChild(\"ButtonContainer\").custom.status \u003d \u0027Id Has Been Used\u0027\n\t\t\tself.custom.duplicated \u003d res\n\t\telse:\n\t\t\tself.parent.parent.parent.getChild(\"ButtonContainer\").custom.status \u003d \u0027\u0027\n\t\t\tself.custom.duplicated \u003d system.dataset.toDataSet([], [])\n\texcept Exception as e:\n\t\tlogger.fatal(\u0027External Id Setting - \u0027 + self.view.params.state.action + \u0027 \u003e\u003e \u0027 + e.message)"
                    }
                  }
                },
                "props": {
                  "style": {
                    "backgroundColor": "#FFFFFF",
                    "classes": "WellDetail/RoundedBorder",
                    "color": "#000000",
                    "fontSize": 16,
                    "fontWeight": "bold"
                  }
                },
                "type": "ia.input.text-field"
              }
            ],
            "meta": {
              "name": "IdContainer"
            },
            "position": {
              "grow": 1,
              "shrink": 0
            },
            "propConfig": {
              "position.basis": {
                "binding": {
                  "config": {
                    "expression": "if({view.params.viewPort.mobileView}, \u002750%\u0027, if({view.params.viewPort.pcView},\u002775px\u0027, \u002740%\u0027)) "
                  },
                  "type": "expr"
                }
              },
              "props.style.paddingLeft": {
                "binding": {
                  "config": {
                    "expression": "if({view.params.viewPort.mobileView}, \u00270px\u0027, \u002716px\u0027) "
                  },
                  "type": "expr"
                }
              },
              "props.style.paddingRight": {
                "binding": {
                  "config": {
                    "expression": "if({view.params.viewPort.mobileView}, \u00270px\u0027, \u002716px\u0027) "
                  },
                  "type": "expr"
                }
              }
            },
            "props": {
              "justify": "space-around",
              "style": {
                "backgroundColor": ""
              }
            },
            "type": "ia.container.flex"
          },
          {
            "children": [
              {
                "meta": {
                  "name": "Label"
                },
                "position": {
                  "basis": "18px",
                  "shrink": 0
                },
                "props": {
                  "style": {
                    "fontSize": "10px",
                    "fontWeight": "normal",
                    "paddingRight": "18px",
                    "textAlign": "center"
                  },
                  "text": "* is required"
                },
                "type": "ia.display.label"
              }
            ],
            "meta": {
              "name": "ReminderContainer"
            },
            "position": {
              "shrink": 0
            },
            "propConfig": {
              "props.style.paddingLeft": {
                "binding": {
                  "config": {
                    "expression": "if({view.params.viewPort.mobileView}, \u00270px\u0027, \u002716px\u0027) "
                  },
                  "type": "expr"
                }
              },
              "props.style.paddingRight": {
                "binding": {
                  "config": {
                    "expression": "if({view.params.viewPort.mobileView}, \u00270px\u0027, \u002716px\u0027) "
                  },
                  "type": "expr"
                }
              }
            },
            "props": {
              "direction": "column",
              "justify": "space-around"
            },
            "type": "ia.container.flex"
          }
        ],
        "meta": {
          "name": "InputContainer"
        },
        "position": {
          "basis": "300px",
          "grow": 1,
          "shrink": 0
        },
        "propConfig": {
          "custom.input": {
            "binding": {
              "config": {
                "struct": {
                  "action": "{../ButtonContainer/OneShotButton.props.readyState.text}",
                  "asset": "{./LocContainer/Dropdown.props.value}",
                  "external_ref_id": "{./IdContainer/TextField.props.text}",
                  "id": null,
                  "pad": "{./PadContainer/Dropdown.props.value}",
                  "type": "{./TypeContainer/Dropdown.props.value}",
                  "well": "{./WellContainer/Dropdown.props.value}"
                },
                "waitOnAll": true
              },
              "type": "expr-struct"
            }
          }
        },
        "props": {
          "alignContent": "space-around",
          "direction": "column",
          "justify": "space-evenly",
          "style": {
            "marginBottom": "3px",
            "marginLeft": "5px",
            "marginRight": "5px",
            "marginTop": "3px"
          }
        },
        "type": "ia.container.flex"
      },
      {
        "meta": {
          "name": "Table"
        },
        "position": {
          "basis": "125px",
          "grow": 2,
          "shrink": 0
        },
        "propConfig": {
          "position.display": {
            "binding": {
              "config": {
                "expression": "len({this.props.data}) \u003e 0"
              },
              "type": "expr"
            }
          },
          "props.columns[0].visible": {
            "binding": {
              "config": {
                "expression": "{view.params.viewPort.mobileView}"
              },
              "type": "expr"
            }
          },
          "props.data": {
            "binding": {
              "config": {
                "path": "../InputContainer/IdContainer/TextField.custom.duplicated"
              },
              "type": "property"
            }
          }
        },
        "props": {
          "columns": [
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "pad",
              "filter": {
                "boolean": {
                  "condition": ""
                },
                "date": {
                  "condition": "",
                  "value": ""
                },
                "enabled": false,
                "number": {
                  "condition": "",
                  "value": ""
                },
                "string": {
                  "condition": "",
                  "value": ""
                },
                "visible": "on-hover"
              },
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "center",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "justify": "center",
              "nullFormat": {
                "includeNullStrings": false,
                "nullFormatValue": "",
                "strict": false
              },
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "",
                  "style": {
                    "classes": ""
                  }
                },
                "max": 100,
                "min": 0,
                "track": {
                  "color": "",
                  "style": {
                    "classes": ""
                  }
                },
                "value": {
                  "enabled": true,
                  "format": "0,0.##",
                  "justify": "center",
                  "style": {
                    "classes": ""
                  }
                }
              },
              "render": "auto",
              "resizable": true,
              "sort": "none",
              "sortable": true,
              "strictWidth": false,
              "style": {
                "classes": ""
              },
              "toggleSwitch": {
                "color": {
                  "selected": "",
                  "unselected": ""
                }
              },
              "viewParams": {},
              "viewPath": "",
              "width": ""
            },
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "well",
              "filter": {
                "boolean": {
                  "condition": ""
                },
                "date": {
                  "condition": "",
                  "value": ""
                },
                "enabled": false,
                "number": {
                  "condition": "",
                  "value": ""
                },
                "string": {
                  "condition": "",
                  "value": ""
                },
                "visible": "on-hover"
              },
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "center",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "justify": "center",
              "nullFormat": {
                "includeNullStrings": false,
                "nullFormatValue": "",
                "strict": false
              },
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "",
                  "style": {
                    "classes": ""
                  }
                },
                "max": 100,
                "min": 0,
                "track": {
                  "color": "",
                  "style": {
                    "classes": ""
                  }
                },
                "value": {
                  "enabled": true,
                  "format": "0,0.##",
                  "justify": "center",
                  "style": {
                    "classes": ""
                  }
                }
              },
              "render": "auto",
              "resizable": true,
              "sort": "none",
              "sortable": true,
              "strictWidth": false,
              "style": {
                "classes": ""
              },
              "toggleSwitch": {
                "color": {
                  "selected": "",
                  "unselected": ""
                }
              },
              "viewParams": {},
              "viewPath": "",
              "visible": true,
              "width": ""
            },
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "datapoint",
              "filter": {
                "boolean": {
                  "condition": ""
                },
                "date": {
                  "condition": "",
                  "value": ""
                },
                "enabled": false,
                "number": {
                  "condition": "",
                  "value": ""
                },
                "string": {
                  "condition": "",
                  "value": ""
                },
                "visible": "on-hover"
              },
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "center",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "justify": "center",
              "nullFormat": {
                "includeNullStrings": false,
                "nullFormatValue": "",
                "strict": false
              },
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "",
                  "style": {
                    "classes": ""
                  }
                },
                "max": 100,
                "min": 0,
                "track": {
                  "color": "",
                  "style": {
                    "classes": ""
                  }
                },
                "value": {
                  "enabled": true,
                  "format": "0,0.##",
                  "justify": "center",
                  "style": {
                    "classes": ""
                  }
                }
              },
              "render": "auto",
              "resizable": true,
              "sort": "none",
              "sortable": true,
              "strictWidth": false,
              "style": {
                "classes": ""
              },
              "toggleSwitch": {
                "color": {
                  "selected": "",
                  "unselected": ""
                }
              },
              "viewParams": {},
              "viewPath": "",
              "visible": true,
              "width": ""
            },
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "external_ref_id",
              "filter": {
                "boolean": {
                  "condition": ""
                },
                "date": {
                  "condition": "",
                  "value": ""
                },
                "enabled": false,
                "number": {
                  "condition": "",
                  "value": ""
                },
                "string": {
                  "condition": "",
                  "value": ""
                },
                "visible": "on-hover"
              },
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "center",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "justify": "center",
              "nullFormat": {
                "includeNullStrings": false,
                "nullFormatValue": "",
                "strict": false
              },
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "",
                  "style": {
                    "classes": ""
                  }
                },
                "max": 100,
                "min": 0,
                "track": {
                  "color": "",
                  "style": {
                    "classes": ""
                  }
                },
                "value": {
                  "enabled": true,
                  "format": "0,0.##",
                  "justify": "center",
                  "style": {
                    "classes": ""
                  }
                }
              },
              "render": "auto",
              "resizable": true,
              "sort": "none",
              "sortable": true,
              "strictWidth": false,
              "style": {
                "classes": ""
              },
              "toggleSwitch": {
                "color": {
                  "selected": "",
                  "unselected": ""
                }
              },
              "viewParams": {},
              "viewPath": "",
              "visible": true,
              "width": ""
            }
          ],
          "selection": {
            "enableRowSelection": false
          }
        },
        "type": "ia.display.table"
      },
      {
        "children": [
          {
            "custom": {
              "query": "\n\t\t\t\tUPDATE gasmeters\n\t\t\t\tSET external_reference_id \u003d \u0027test1\u0027\n\t\t\t\tFROM gasmeters gm\n\t\t\t\tLEFT JOIN gasmeter_types gt ON gt.id \u003d gm.gmTypeId\n\t\t\t\tWHERE padId \u003d 176\n\t\t\t\tAND wellsiteId \u003d 149\n\t\t\t\tAND gt.type \u003d \u0027Buy\u0027\n\t\t\t\tAND NOT EXISTS (\n\t\t\t\t\tSELECT 1\n\t\t\t\t\tFROM gasmeters \n\t\t\t\t\tWHERE external_reference_id \u003d \u0027test1\u0027\n\t\t\t\t)\n\t\t\t\t"
            },
            "events": {
              "component": {
                "onActionPerformed": {
                  "config": {
                    "script": "\t\u0027\u0027\u0027 Add external reference id\n\tReturns None\n\t\u0027\u0027\u0027\n\tlogger \u003d system.util.getLogger(\u0027IgnitionSystem\u0027)\n#\tInput Control preventing SQL injection attack\n\tpad \u003d self.parent.parent.getChild(\"InputContainer\").custom.input.pad\n\twell \u003d self.parent.parent.getChild(\"InputContainer\").custom.input.well\n\tdatapoint \u003d self.parent.parent.getChild(\"InputContainer\").custom.input.type\n\texternalId \u003d self.parent.parent.getChild(\"InputContainer\").custom.input.external_ref_id\n\t\n\tinvalid \u003d True\n\tif not isinstance(pad, long):\n\t\tself.parent.parent.getChild(\"InputContainer\").getChild(\"PadContainer\").props.style.backgroundColor \u003d \u0027#FF000065\u0027\n\t\tlogger.fatal(\u0027External Reference Id Setting - OneShotButton \u003e\u003e Invalid Input 1\u0027)\n\t\tself.props.value \u003d 0\n\t\tinvalid \u003d  invalid and False \n\tif not isinstance(well, long):\n\t\tself.parent.parent.getChild(\"InputContainer\").getChild(\"WellContainer\").props.style.backgroundColor \u003d \u0027#FF000065\u0027\n\t\tlogger.fatal(\u0027External Reference Id Setting - OneShotButton \u003e\u003e Invalid Input 2\u0027)\n\t\tself.props.value \u003d 0\n\t\tinvalid \u003d invalid and False\n\tif not isinstance(datapoint, unicode):\n\t\tself.parent.parent.getChild(\"InputContainer\").getChild(\"TypeContainer\").props.style.backgroundColor \u003d \u0027#FF000065\u0027\n\t\tlogger.fatal(\u0027External Reference Id Setting - OneShotButton \u003e\u003e Invalid Input 3\u0027)\n\t\tself.props.value \u003d 0\n\t\tinvalid \u003d invalid and False\n\tif \u0027select\u0027 in externalId.lower() or \u0027insert\u0027 in externalId.lower() or \u0027delete\u0027 in externalId.lower() or \u0027update\u0027 in externalId.lower() or externalId.lower() \u003d\u003d \u0027null\u0027 or externalId.strip(\u0027\\n\u0027) \u003d\u003d \u0027\u0027:\n\t\tself.parent.parent.getChild(\"InputContainer\").getChild(\"IdContainer\").props.style.backgroundColor \u003d \u0027#FF000065\u0027\n\t\tlogger.fatal(\u0027External Reference Id Setting - OneShotButton \u003e\u003e Invalid Input 4\u0027)\n\t\tself.props.value \u003d 0\n\t\tinvalid \u003d invalid and False\n\t\n\tif not invalid:\n\t\treturn\n\t\t\n\tinsertQuery \u003d \u0027\u0027\n\tif self.view.params.state.action \u003d\u003d \u0027Add\u0027:\n\t\tif \u0027Gas\u0027 not in datapoint:\n\t\t\ttry:\n\t\t\t\tres \u003d self.parent.parent.addExternalIdForNonGas(pad, well, datapoint, externalId)\n\t\t\t\tself.parent.custom.status \u003d res[\u0027status\u0027]\n\t\t\texcept Exception as e:\n\t\t\t\tlogger.info(\u0027External Reference Id Setting - Add \u003e\u003e \u0027+ e.message)\n\t\t\tfinally:\n\t\t\t\tself.props.value \u003d 0\n\t\t\t\treturn\n\t\telse:\n\t\t\tdatapoint \u003d datapoint.split(\u0027 - \u0027)[-1]\n\t\t\ttry:\n\t\t\t\tres \u003d self.parent.parent.addExternalIdForGas(pad, well, datapoint, externalId)\n\t\t\t\tself.parent.custom.status \u003d res[\u0027status\u0027]\n\t\t\texcept Exception as e:\n\t\t\t\tlogger.info(\u0027External Reference Id Setting - Add \u003e\u003e \u0027 + e.message)\n\t\t\tfinally:\n\t\t\t\tself.props.value \u003d 0\n\t\t\t\treturn\n\t\n\tif self.view.params.state.action \u003d\u003d \u0027Update\u0027:\n\t\tif \u0027Gas\u0027 not in datapoint:\n\t\t\ttry:\n\t\t\t\tparams \u003d {\n\t\t\t\t\t\u0027id\u0027: self.view.params.state.id,\n\t\t\t\t\t\u0027pad_id\u0027: pad,\n\t\t\t\t\t\u0027wellsite_id\u0027: well,\n\t\t\t\t\t\u0027external_ref_id\u0027: externalId,\n\t\t\t\t\t\u0027datapoint\u0027: datapoint\n\t\t\t\t}\n\t\t\t\tres \u003d self.parent.parent.updateExternalIdNotGas(params)\n\t\t\t\tlogger.info(res[\u0027status\u0027])\n\t\t\t\tself.parent.custom.status \u003d res[\u0027status\u0027]\n\t\t\texcept Exception as e:\n\t\t\t\tlogger.info(\u0027External Reference Id Setting - Update \u003e\u003e \u0027+ e.message)\n\t\t\tfinally:\n\t\t\t\tself.props.value \u003d 0\n\t\t\t\treturn\n\t\telse:\n\t\t\ttry:\n\t\t\t\tparams \u003d {\n\t\t\t\t\t\u0027id\u0027: self.view.params.state.id,\n\t\t\t\t\t\u0027pad_id\u0027: pad,\n\t\t\t\t\t\u0027wellsite_id\u0027: well,\n\t\t\t\t\t\u0027external_ref_id\u0027: externalId,\n\t\t\t\t\t\u0027datapoint\u0027: datapoint\n\t\t\t\t}\n\t\t\t\tres \u003d self.parent.parent.updateExternalIdGas(params)\n\t\t\t\tself.parent.custom.status \u003d res[\u0027status\u0027]\n\t\t\texcept Exception as e:\n\t\t\t\tlogger.info(\u0027External Reference Id Setting - Update \u003e\u003e \u0027+ e.message)\n\t\t\tfinally:\n\t\t\t\tself.props.value \u003d 0\n\t\t\t\treturn"
                  },
                  "scope": "G",
                  "type": "script"
                }
              }
            },
            "meta": {
              "name": "OneShotButton"
            },
            "position": {
              "basis": "80px"
            },
            "propConfig": {
              "props.confirm.text": {
                "binding": {
                  "config": {
                    "expression": "if({.../Table.position.display}, \u0027Are you sure you want to \u0027 + lower({view.params.state.action}) + \u0027 duplicate External Reference Id?\u0027, \u0027Are you sure?\u0027) "
                  },
                  "type": "expr"
                }
              },
              "props.enabled": {
                "binding": {
                  "config": {
                    "expression": "{view.params.state.action} \u003d \u0027Add\u0027 || {view.params.state.action} \u003d \u0027Update\u0027 "
                  },
                  "type": "expr"
                }
              },
              "props.readyState.text": {
                "binding": {
                  "config": {
                    "expression": "if({view.params.state.action} \u003d \u0027Add\u0027, \u0027Add\u0027, if({view.params.state.action} \u003d \u0027Update\u0027, \u0027Update\u0027, \u0027\u0027))"
                  },
                  "type": "expr"
                }
              },
              "props.writingState.text": {
                "binding": {
                  "config": {
                    "expression": "if({view.params.state.action} \u003d \u0027Add\u0027, \u0027Adding\u0027, if({view.params.state.action} \u003d \u0027Update\u0027, \u0027Updating\u0027, \u0027\u0027))"
                  },
                  "type": "expr"
                }
              }
            },
            "props": {
              "confirm": {
                "enabled": true
              },
              "disabledStyle": {
                "classes": "Border Button"
              },
              "primary": false,
              "readyState": {
                "icon": {
                  "style": {
                    "height": "24px",
                    "width": "2rem"
                  }
                },
                "style": {
                  "backgroundColor": "#FFFFFF",
                  "classes": "WellDetail/RoundedBorder",
                  "color": "#000000",
                  "fontSize": 16,
                  "fontWeight": "bold"
                }
              },
              "writingState": {
                "icon": {
                  "path": "material/hourglass_empty",
                  "style": {
                    "height": "24px",
                    "width": "2rem"
                  }
                },
                "style": {
                  "classes": "WellDetail/RoundedBorder"
                }
              }
            },
            "type": "ia.input.oneshotbutton"
          },
          {
            "events": {
              "component": {
                "onActionPerformed": {
                  "config": {
                    "script": "\tself.view.params.openPopup \u003d False\n\tsystem.perspective.closePopup(\u0027SettingExternalId\u0027)"
                  },
                  "scope": "G",
                  "type": "script"
                }
              }
            },
            "meta": {
              "name": "Button-Close"
            },
            "position": {
              "basis": "80px"
            },
            "props": {
              "style": {
                "backgroundColor": "#FFFFFF",
                "classes": "WellDetail/RoundedBorder",
                "color": "#000000",
                "fontSize": 16,
                "fontWeight": "bold"
              },
              "text": "Close"
            },
            "type": "ia.input.button"
          }
        ],
        "custom": {
          "status": ""
        },
        "meta": {
          "name": "ButtonContainer"
        },
        "position": {
          "basis": "36px",
          "shrink": 0
        },
        "propConfig": {
          "custom.status": {
            "onChange": {
              "enabled": null,
              "script": "\timport time\n\tif currentValue.value \u003d\u003d \u0027Add Successful\u0027 or currentValue.value \u003d\u003d \u0027Update Successful\u0027:\n\t\ttime.sleep(5)\n\t\tself.custom.status \u003d \u0027\u0027"
            }
          }
        },
        "props": {
          "justify": "space-around",
          "style": {
            "backgroundColor": "#FAFAFB",
            "bottom": "0px",
            "marginBottom": "7px",
            "position": "sticky  "
          }
        },
        "type": "ia.container.flex"
      }
    ],
    "custom": {
      "query": "\n\t\tINSERT INTO audit_log (source, table_name, action, old_data, new_data, modified_by, t_stamp)\n\t\tVALUES (\u0027External Reference Id Setting\u0027, \u0027gasmeters\u0027, \u0027ADD\u0027, \u0027\u003crow id\u003d\"1567\" name\u003d\"87654321-2\" padId\u003d\"352\" wellsiteId\u003d\"0\" gmTypeId\u003d\"3\"/\u003e\u0027, \u0027\u003crow id\u003d\"1567\" name\u003d\"87654321-2\" padId\u003d\"352\" wellsiteId\u003d\"0\" gmTypeId\u003d\"3\" external_reference_id\u003d\"testCreatePadData\"/\u003e\u0027, \u0027htran\u0027, GETDATE())\n\t\t"
    },
    "meta": {
      "name": "root"
    },
    "props": {
      "direction": "column",
      "style": {
        "backgroundColor": "#FAFAFB"
      }
    },
    "scripts": {
      "customMethods": [
        {
          "name": "addExternalIdForGas",
          "params": [
            "pad",
            "well",
            "datapoint",
            "externalId"
          ],
          "script": "\t\u0027\u0027\u0027 Add external reference id for Gas meter\n\tArgs:\n\t\tpad (int): pad\u0027s id\n\t\twell (int): well\u0027s id\n\t\tdatapoint (str): gas meter type\n\t\texternalId (str): external reference id\n\tReturns {\n\t\trow (int): number of affected row,\n\t\tstatus (str): message of updating process\n\t}\n\t\u0027\u0027\u0027\n\t\n\tlogger \u003d system.util.getLogger(\u0027IgnitionSystem\u0027)\n\tscalarQuery \u003d \u0027\u0027\u0027\n\tSELECT \n\t\tgm.id,\n\t\tgm.name,\n\t\tgm.padId,\n\t\tgm.wellsiteId,\n\t\tgt.type\n\tFROM gasmeters gm\n\tLEFT JOIN gasmeter_types gt ON gm.gmTypeId \u003d gt.id\n\tWHERE (\n\t\tpadId \u003d {pad}\n\t\tAND (wellsiteId \u003d {well} OR wellsiteId IS NULL)\n\t\tAND gt.type \u003d \\\u0027{datapoint}\\\u0027\n\t)\n\t\u0027\u0027\u0027.format(\n\t\tpad \u003d pad,\n\t\twell \u003d well,\n\t\tdatapoint \u003d datapoint\n\t)\n\ttry:\n\t\tres \u003d system.db.runScalarQuery(scalarQuery)\n\t\tquery \u003d \u0027\u0027\n\t\tif res is None:\n\t\t\tself.custom.query \u003d scalarQuery\n\t\t\treturn {\n\t\t\t\t\u0027row\u0027: 0,\n\t\t\t\t\u0027status\u0027: \u0027Gas Meter Not Found\u0027\n\t\t\t}\n\t\t\treturn\n\t\telse:\n\t\t\tcurrentDataQuery \u003d \u0027\u0027\u0027\n\t\t\tSELECT \n\t\t\t\tgm.id,\n\t\t\t\tgm.name,\n\t\t\t\tgm.padId,\n\t\t\t\tgm.wellsiteId,\n\t\t\t\tgm.gmTypeId,\n\t\t\t\tgm.external_reference_id\n\t\t\tFROM gasmeters gm\n\t\t\tLEFT JOIN gasmeter_types gt ON gm.gmTypeId \u003d gt.id\n\t\t\tWHERE padId \u003d {pad}\n\t\t\tAND (wellsiteId \u003d {well} OR wellsiteId IS NULL)\n\t\t\tAND gt.type \u003d \\\u0027{datapoint}\\\u0027\n\t\t\tFOR XML RAW\n\t\t\t\u0027\u0027\u0027.format(\n\t\t\t\tpad \u003d pad,\n\t\t\t\twell \u003d well if well is not None else \u0027IS NULL\u0027,\n\t\t\t\tdatapoint \u003d datapoint\n\t\t\t)\n\t\t\toldData \u003d system.db.runScalarQuery(currentDataQuery)\n\t\t\t\n\t\t\tquery \u003d \u0027\u0027\u0027\n\t\t\tUPDATE gasmeters\n\t\t\tSET external_reference_id \u003d \\\u0027{id}\\\u0027\n\t\t\tFROM gasmeters gm\n\t\t\tLEFT JOIN gasmeter_types gt ON gt.id \u003d gm.gmTypeId\n\t\t\tWHERE padId \u003d {pad}\n\t\t\tAND (wellsiteId \u003d {well} OR wellsiteId IS NULL)\n\t\t\tAND gt.type \u003d \\\u0027{datapoint}\\\u0027\n\t\t\tAND NOT EXISTS (\n\t\t\t\tSELECT 1\n\t\t\t\tFROM gasmeters \n\t\t\t\tWHERE external_reference_id \u003d \\\u0027{id}\\\u0027\n\t\t\t)\n\t\t\t\u0027\u0027\u0027.format(\n\t\t\t\tpad \u003d pad,\n\t\t\t\twell \u003d well,\n\t\t\t\tdatapoint \u003d datapoint,\n\t\t\t\tid \u003d externalId\n\t\t\t)\n\t\tres \u003d system.db.runUpdateQuery(query)\n\n\t\tif res \u003d\u003d 0:\n\t\t\treturn {\n\t\t\t\t\u0027row\u0027: res,\n\t\t\t\t\u0027status\u0027: \u0027Add Failed\u0027\n\t\t\t}\n\t\t\n\t\tnewData \u003d system.db.runScalarQuery(currentDataQuery)\n\t\tlogger.info(\u0027new \u003e\u003e \u0027+str(newData))\n\t\tinsertQuery \u003d \u0027\u0027\u0027\n\t\tINSERT INTO audit_log (source, table_name, action, old_data, new_data, modified_by, t_stamp)\n\t\tVALUES (\\\u0027External Reference Id Setting\\\u0027, \\\u0027gasmeters\\\u0027, \\\u0027ADD\\\u0027, \\\u0027{oldData}\\\u0027, \\\u0027{newData}\\\u0027, \\\u0027{user}\\\u0027, GETDATE())\n\t\t\u0027\u0027\u0027.format(\n\t\t\toldData \u003d oldData,\n\t\t\tnewData \u003d newData,\n\t\t\tuser \u003d self.session.props.auth.user.userName\n\t\t)\n\t\tself.custom.query \u003d insertQuery\n\t\tres_temp \u003d system.db.runUpdateQuery(insertQuery)\n\t\tlogger.info(\u0027insert \u003e\u003e \u0027+str(res_temp))\n\t\treturn {\n\t\t\t\u0027row\u0027: res,\n\t\t\t\u0027status\u0027: \u0027Add Successful\u0027\n\t\t}\n\texcept Exception as e:\n\t\tlogger.info(\u0027External Reference Id Setting - Add \u003e\u003e \u0027 + e.message)\n\t\treturn {\n\t\t\t\u0027row\u0027: res,\n\t\t\t\u0027status\u0027: \u0027Add Failed\u0027\n\t\t}"
        },
        {
          "name": "addExternalIdForNonGas",
          "params": [
            "pad",
            "well",
            "datapoint",
            "externalId"
          ],
          "script": "\t\u0027\u0027\u0027 Add external reference id for non gas meter data\n\tArgs:\n\t\tpad (int): pad\u0027s id\n\t\twell (int): well\u0027s id\n\t\tdatapoint (str): tag\u0027s endpoint\n\t\texternalId (str): external reference id\n\tReturns {\n\t\trow (int): number of affected row,\n\t\tstatus (str): message of updating process\n\t}\n\t\u0027\u0027\u0027\n\tlogger \u003d system.util.getLogger(\u0027IgnitionSystem\u0027)\n\tinsertQuery \u003d \u0027\u0027\u0027\n\tINSERT INTO external_reference (pad_id, wellsite_id, datapoint, external_ref_id)\n\tSELECT \n\t\t{pad}, \n\t\t{well}, \n\t\t\\\u0027{datapoint}\\\u0027,\n\t\t\\\u0027{externalId}\\\u0027\n\tWHERE NOT EXISTS (\n\t\tSELECT 1 \n\t\tFROM external_reference \n\t\tWHERE (\n\t\t\tpad_id \u003d {pad}\n\t\t\tAND wellsite_id \u003d {well}\n\t\t\tAND datapoint \u003d \\\u0027{datapoint}\\\u0027\n\t\t)\n\t\tOR external_ref_id \u003d \\\u0027{externalId}\\\u0027\n\t)\n\t\u0027\u0027\u0027.format(\n\t\tpad \u003d pad,\n\t\twell \u003d well,\n\t\tdatapoint \u003d \u0027WellHead\u0027 if datapoint \u003d\u003d \u0027Completion\u0027 else datapoint,\n\t\texternalId \u003d externalId\n\t)\n\ttry:\n\t\tlogger.info(\u0027insertQuery: \u0027 + insertQuery)\n\t\tres \u003d system.db.runUpdateQuery(insertQuery)\n\t\tif res \u003d\u003d 0 or res is None:\n\t\t\treturn {\n\t\t\t\t\u0027row\u0027: res,\n\t\t\t\t\u0027status\u0027: \u0027Add Failed\u0027\n\t\t\t}\n\t\t\n\t\tcurrentDataQuery \u003d \u0027\u0027\u0027\n\t\tSELECT *\n\t\tFROM external_reference\n\t\tWHERE pad_id \u003d {pad}\n\t\tAND wellsite_id \u003d {well}\n\t\tAND datapoint \u003d \\\u0027{datapoint}\\\u0027\n\t\tFOR XML RAW\n\t\t\u0027\u0027\u0027.format(\n\t\t\tpad \u003d pad,\n\t\t\twell \u003d well,\n\t\t\tdatapoint \u003d datapoint\n\t\t)\n\t\tnewData \u003d system.db.runScalarQuery(currentDataQuery)\n\t\tlogger.info(\u0027new data: \u0027 + str(newData))\n\t\tinsertQuery \u003d \u0027\u0027\u0027\n\t\tINSERT INTO audit_log (source, table_name, action, old_data, new_data, modified_by, t_stamp)\n\t\tVALUES (\\\u0027External Reference Id Setting\\\u0027, \\\u0027external_reference\\\u0027, \\\u0027ADD\\\u0027, \\\u0027{oldData}\\\u0027, \\\u0027{newData}\\\u0027, \\\u0027{user}\\\u0027, GETDATE())\n\t\t\u0027\u0027\u0027.format(\n\t\t\toldData \u003d None,\n\t\t\tnewData \u003d newData,\n\t\t\tuser \u003d self.session.props.auth.user.userName\n\t\t)\n\t\tsystem.db.runUpdateQuery(insertQuery)\n\t\treturn {\n\t\t\t\u0027row\u0027: res,\n\t\t\t\u0027status\u0027: \u0027Add Successful\u0027\n\t\t}\n\texcept Exception as e:\n\t\tlogger.info(\u0027External Reference Id Setting - Add \u003e\u003e \u0027+ e.message)"
        },
        {
          "name": "updateExternalIdNotGas",
          "params": [
            "newData"
          ],
          "script": "\t\u0027\u0027\u0027 Update external reference id of any data that is not gas meter\n\tArgs:\n\t\tnewData (dict):\n\t\t\tid (int): id of either external_reference table or gasmeters table\n\t\t\tpad_id (int): id of pad\n\t\t\twellsite_id (int): id of wellsite\n\t\t\texternal_ref_id (str): external reference id\n\t\t\tdatapoint (str): datapoint of data coming from tag\n\t\t\n\tReturns {\n\t\t\u0027row\u0027 (int): number of affected rows\n\t\t\u0027status\u0027 (str): update status message\n\t}\n\t\u0027\u0027\u0027\n\tlogger \u003d system.util.getLogger(\u0027IgnitionSystem\u0027)\n\tlogger.info(\u0027Updating Non Gas Data\u0027)\n#\tControl Input Preventing SQL Injection Attack\n\tid \u003d newData[\u0027id\u0027]\n\tpadId \u003d newData[\u0027pad_id\u0027]\n\twellId \u003d newData[\u0027wellsite_id\u0027]\n\texternalId \u003d newData[\u0027external_ref_id\u0027]\n\tdatapoint \u003d newData[\u0027datapoint\u0027] \n\tif isinstance(padId, int)\\\n\t\t\tand isinstance(wellId, int)\\\n\t\t\tand isinstance(externalId, str)\\\n\t\t\tand isinstance(id, int)\\\n\t\t\tand isinstance(datapoint, str):\n\t\tlogger.fatal(\u0027External Reference Id Setting \u003e\u003e Unvalid input\u0027)\n\t\treturn False\n\t\n#\tPrepare data\n\tuserName \u003d self.session.props.auth.user.userName\n\tdatapoint \u003d datapoint if datapoint !\u003d \u0027Completion\u0027 else \u0027WellHead\u0027\n\told_data, new_data \u003d None, None\n\t\n#\tRetrieve old data\n\tquery \u003d \u0027\u0027\u0027\n\tSELECT * FROM external_reference\n\tWHERE id \u003d {id}\n\tFOR XML RAW\n\t\u0027\u0027\u0027.format(id \u003d id)\n\told_data \u003d system.db.runScalarQuery(query)\n\tlogger.info(\u0027old data: \u0027 + str(old_data))\n#\tUpdate external_reference table\n\tupdateQuery \u003d \u0027\u0027\u0027\n\tUPDATE external_reference\n\tSET external_ref_id \u003d \\\u0027{externalId}\\\u0027, datapoint \u003d \\\u0027{datapoint}\\\u0027\n\tWHERE id \u003d {id}\n\t\u0027\u0027\u0027.format(\n\t\texternalId \u003d externalId,\n\t\tdatapoint \u003d datapoint,\n\t\tid \u003d id\n\t)\n\tres \u003d system.db.runUpdateQuery(updateQuery)\n\tif res \u003c 1:\n\t\treturn {\n\t\t\t\u0027row\u0027: res,\n\t\t\t\u0027status\u0027: \u0027Update Failed\u0027\n\t\t}\n\t\n#\tRetrieve new data\n\tnew_data \u003d system.db.runScalarQuery(query)\n\tlogger.info(\u0027new data: \u0027 + str(new_data))\n#\tInsert changes to audit_log table\n\tinsertQuery \u003d \u0027\u0027\u0027\n\tINSERT INTO audit_log (source, table_name, action, old_data, new_data, modified_by, t_stamp)\n\tVALUES (\\\u0027External Reference Id Setting\\\u0027, \\\u0027external_reference\\\u0027, \\\u0027UPDATE\\\u0027, \\\u0027{old}\\\u0027, \\\u0027{new}\\\u0027, \\\u0027{author}\\\u0027, GETDATE())\n\t\u0027\u0027\u0027.format(\n\t\told \u003d old_data,\n\t\tnew \u003d new_data,\n\t\tauthor \u003d userName\n\t)\n\tlogger.info(\u0027insert query: \u0027+ insertQuery)\n\tres \u003d system.db.runUpdateQuery(insertQuery)\n\tlogger.info(str(res))\n\tif res \u003c 1:\n\t\treturn {\n\t\t\t\u0027row\u0027: res,\n\t\t\t\u0027status\u0027: \u0027Update Failed\u0027\n\t\t}\n\telse:\n\t\treturn {\n\t\t\t\u0027row\u0027: res,\n\t\t\t\u0027status\u0027: \u0027Update Successful\u0027\n\t\t}"
        },
        {
          "name": "updateExternalIdGas",
          "params": [
            "newData"
          ],
          "script": "\t\u0027\u0027\u0027 Update external reference id of any data that is gas meter\n\tArgs:\n\t\tnewData (dict):\n\t\t\tid (int): id of either external_reference table or gasmeters table\n\t\t\tpad_id (int): id of pad\n\t\t\twellsite_id (int): id of wellsite\n\t\t\texternal_ref_id (str): external reference id\n\t\t\tdatapoint (str): datapoint of data coming from tag\n\t\t\n\tReturns {\n\t\t\u0027row\u0027 (int): number of affected rows\n\t\t\u0027status\u0027 (str): update status message\n\t}\n\t\u0027\u0027\u0027\n\tlogger \u003d system.util.getLogger(\u0027IgnitionSystem\u0027)\n#\tControl Input Preventing SQL Injection Attack\n\tid \u003d newData[\u0027id\u0027]\n\tpadId \u003d newData[\u0027pad_id\u0027]\n\twellId \u003d newData[\u0027wellsite_id\u0027]\n\texternalId \u003d newData[\u0027external_ref_id\u0027]\n\tdatapoint \u003d newData[\u0027datapoint\u0027] \n\tif isinstance(padId, int)\\\n\t\t\tand isinstance(wellId, int)\\\n\t\t\tand isinstance(externalId, str)\\\n\t\t\tand isinstance(id, int)\\\n\t\t\tand isinstance(datapoint, str):\n\t\tlogger.fatal(\u0027External Reference Id Setting \u003e\u003e Unvalid input\u0027)\n\t\treturn False\n\t\n#\tPrepare data\n\tuserName \u003d self.session.props.auth.user.userName\n\told_data, new_data \u003d None, None\n\t\n#\tRetrieve old data\n\tquery \u003d \u0027\u0027\u0027\n\tSELECT * FROM gasmeters\n\tWHERE id \u003d {id}\n\tFOR XML RAW\n\t\u0027\u0027\u0027.format(id \u003d id)\n\told_data \u003d system.db.runScalarQuery(query)\n\n#\tUpdate external_reference table\n\tupdateQuery \u003d \u0027\u0027\u0027\n\tUPDATE gasmeters\n\tSET external_reference_id \u003d \\\u0027{externalId}\\\u0027\n\tWHERE id \u003d {id}\n\t\u0027\u0027\u0027.format(\n\t\texternalId \u003d externalId,\n\t\tid \u003d id\n\t)\n\tres \u003d system.db.runUpdateQuery(updateQuery)\n\tif res \u003c 1:\n\t\treturn {\n\t\t\t\u0027row\u0027: res,\n\t\t\t\u0027status\u0027: \u0027Update Failed\u0027\n\t\t}\n\t\n#\tRetrieve new data\n\tnew_data \u003d system.db.runScalarQuery(query)\n\t\n#\tInsert changes to audit_log table\n\tinsertQuery \u003d \u0027\u0027\u0027\n\tINSERT INTO audit_log (source, table_name, action, old_data, new_data, modified_by, t_stamp)\n\tVALUES (\\\u0027External Reference Id Setting\\\u0027,\\\u0027gasmeters\\\u0027, \\\u0027UPDATE\\\u0027, \\\u0027{old}\\\u0027, \\\u0027{new}\\\u0027, \\\u0027{author}\\\u0027, GETDATE())\n\t\u0027\u0027\u0027.format(\n\t\told \u003d old_data,\n\t\tnew \u003d new_data,\n\t\tauthor \u003d userName\n\t)\n\tres \u003d system.db.runUpdateQuery(insertQuery)\n\tif res \u003c 1:\n\t\treturn {\n\t\t\t\u0027row\u0027: res,\n\t\t\t\u0027status\u0027: \u0027Update Failed\u0027\n\t\t}\n\telse:\n\t\treturn {\n\t\t\t\u0027row\u0027: res,\n\t\t\t\u0027status\u0027: \u0027Update Successful\u0027\n\t\t}"
        }
      ],
      "extensionFunctions": null,
      "messageHandlers": []
    },
    "type": "ia.container.flex"
  }
}